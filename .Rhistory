for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
expVarianceDf <- data.frame(expVariance)
colnames(expVarianceDf)<-c('Variances')
# Plot a histogram of the Variance
g <- ggplot(expVarianceDf,
aes(x=expVarianceDf$Variances,y=c(1:n)))
g <- g + geom_line(colour="black")
g <- g + ggtitle("Comparison of sample and theoretical variance of exponential distribution (λ=0.2)")
g <- g + xlab("Variances")
g <- g + ylab("Frequency")
g
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
x<-c(1:n)
plot(x,expVariance)
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
x<-c(1:n)
plot(x,expVariance,
type="line")
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2/k))
x<-c(1:n)
plot(x,expVariance,
type="line")
(5/sqrt(40))^2
var(rexp(40,0.2))
c<-rexp(40,0.2)
mean(c)
m<-mean(c)
c-m
d<-(c-m)^2
d
sum(d)/39
sum(d)/40
var(c)
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
x<-c(1:n)
plot(x,expVariance,
type="line")
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 500
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
x<-c(1:n)
plot(x,expVariance,
type="line")
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 500
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
hist(expVariance)
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 500
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
expVarianceDf <- data.frame(expVariance)
colnames(expVarianceDf)<-c('variances')
# Plot a histogram of the Variance
g <- ggplot(expVarianceDf,
aes(x=expVarianceDf$variances))
g <- g + geom_line(colour="black")
g <- g + ggtitle("Comparison of sample and theoretical variance of exponential distribution (λ=0.2)")
g <- g + xlab("Variances")
g <- g + ylab("Frequency")
g
#
library(ggplot2)
#
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 500
# Set sampling to 1000
n <- 1000
# Create a vector of means of 40 exponentials. Repeat it n times
expVariance = NULL
for (i in 1:n)
expVariance <- c(expVariance,
var(rexp(k,λ))/(σ^2))
expVarianceDf <- data.frame(expVariance)
colnames(expVarianceDf)<-c('variances')
# Plot a histogram of the Variance
g <- ggplot(expVarianceDf,
aes(x=expVarianceDf$variances))
g <- g + geom_histogram(alpha=0.2,
binwidth=0.3,
colour="black")
g <- g + geom_vline(xintercept = 1.0,
size = 2)
g <- g + ggtitle("Comparison of sample and theoretical variance of exponential distribution (λ=0.2)")
g <- g + xlab("Variances")
g <- g + ylab("Frequency")
g
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40
#
expSampleVector<-rexp(k,λ)
expSampleVariance<-var(expSampleVector)
expTheortVariance<-σ^2
expSampleVariance/expTheortVariance
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 500
#
expSampleVector<-rexp(k,λ)
expSampleVariance<-var(expSampleVector)
expTheortVariance<-σ^2
expSampleVariance/expTheortVariance
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 5000
#
expSampleVector<-rexp(k,λ)
expSampleVariance<-var(expSampleVector)
expTheortVariance<-σ^2
expSampleVariance/expTheortVariance
# Set rate of exponential distribution, λ as 0.2
λ <- 0.2
σ <- 1/λ
# Set number of exponentials
k <- 40000
#
expSampleVector<-rexp(k,λ)
expSampleVariance<-var(expSampleVector)
expTheortVariance<-σ^2
expSampleVariance/expTheortVariance
data(ToothGrowth)
ToothGrowth
tg<-data.frame(ToothGrowthData)
tg<-data.frame(ToothGrowth)
summary(tg)
names(tg)
head(tg)
ToothGrowth
q()
setwd("~/C6W3")
?ToothGrowth
tg<-data.frame(ToothGrowth)
summarise(group_by(tg,supp,dose),avgGrowth=mean(len))
library(dplyr)
summarise(group_by(tg,supp,dose),avgGrowth=mean(len))
arrange(tg,supp,dose)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,supp,dose)
tgWide<-data.frame(ID=1:10,o=tgSorted$len[1:30],v=tgSorted$len[21:60])
tgSorted
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
tgWide<-data.frame(ID=1:10,
ojSuppLen=filter(tgSorted,supp=="OJ" && dose==0.5))
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
tgWide<-data.frame(ID=1:10,
ojSuppLen=filter(tgSorted,supp=="OJ" && dose==0.5))
tgWide
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
d1<-filter(tgSorted,supp=="OJ" & dose==0.5)
d2<-filter(tgSorted,supp=="OJ" & dose==1.0)
d3<-filter(tgSorted,supp=="OJ" & dose==2.0)
d2
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
d1<-filter(tgSorted,supp=="OJ" & dose==0.5)
d2<-filter(tgSorted,supp=="OJ" & dose==1.0)
d3<-filter(tgSorted,supp=="OJ" & dose==2.0)
d<-rbind(d1,d2,d3)
d
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
d1<-filter(tgSorted,supp=="OJ" & dose==0.5)
d2<-filter(tgSorted,supp=="OJ" & dose==1.0)
d3<-filter(tgSorted,supp=="OJ" & dose==2.0)
d<-rbind(mutate(d1,ID=1:10),
mutate(d3,ID=1:10),
mutate(d2,ID=1:10))
d
tg<-data.frame(ToothGrowth)
summary(filter(tg,supp=="OJ"))
#
summary(filter(tg,supp=="VC"))
#
tg<-data.frame(ToothGrowth)
summary(filter(tg,supp=="OJ"))
names(tg)
library(dplyr)
#
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
d1<-filter(tgSorted,supp=="OJ" & dose==0.5)
d2<-filter(tgSorted,supp=="OJ" & dose==1.0)
d3<-filter(tgSorted,supp=="OJ" & dose==2.0)
d<-rbind(d1,d2,d3)
d
tgSorted
oj<-filter(tgSorted,supp=="OJ")
vc<-filter(tgSorted,supp=="VC")
oj
t.test(oj$len,vc$len,paired=true)
t.test(oj$len,vc$len,paired=TRUE)
t.test(oj$len,vc$len,paired=TRUE)$conf.test
t.test(oj$len,vc$len,paired=TRUE)$statistic
names(t.test)
n<-t.test(oj$len,vc$len,paired=TRUE)
names(n)
?t.test
t.test(oj$len,vc$len,paired=TRUE)$statistic
t.test(oj$len,vc$len,paired=TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ")
vc<-filter(tgSorted,supp=="VC")
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)$conf.test
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)$conf
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)$conf.level
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)$conf.int
t.test(oj$len,vc$len,paired=TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==0.5)
vc<-filter(tgSorted,supp=="VC" & dose==0.5)
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==1.0)
vc<-filter(tgSorted,supp=="VC" & dose==1.0)
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==2.0)
vc<-filter(tgSorted,supp=="VC" & dose==2.0)
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
summarise(group_by(tg,supp,dose),
avgLen=mean(len))
#
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose=="2.0")
vc<-filter(tgSorted,supp=="VC" & dose=="2.0")
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==2.0)
vc<-filter(tgSorted,supp=="VC" & dose==2.0)
t.test(oj$len,vc$len,paired=TRUE,var.equal = TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==2.0)
vc<-filter(tgSorted,supp=="VC" & dose==2.0)
t.test(oj$len,vc$len,paired=TRUE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==2.0)
vc<-filter(tgSorted,supp=="VC" & dose==2.0)
t.test(oj$len,vc$len,paired=TRUEE)
library(dplyr)
tg<-data.frame(ToothGrowth)
tgSorted<-arrange(tg,
supp,
dose)
oj<-filter(tgSorted,supp=="OJ" & dose==2.0)
vc<-filter(tgSorted,supp=="VC" & dose==2.0)
t.test(oj$len,vc$len,paired=TRUE)
rnorm
rnorm(10,4.5)
rabbitWeight <- rnorm(10,4.5)
mean(rabbitWeight)
rabbitWeightMean = NULL
for (i in 1:10)
rabbitWeightMean <- c(rabbitWeightMean, mean(rnorm(10,4.5)))
rdf <- data.frame(rabbitWeightMean)
rdf
plot(rabbitWeightMean)
hist(rabbitWeightMean)
rabbitWeightMean <- c(rabbitWeightMean, mean(rnorm(100,4.5)))
rdf <- data.frame(rabbitWeightMean)
hist(rdf$rabbitWeightMean)
clear
install.packages("shiny")
clear
setwd("~/shiny-app")
setwd("~")
library(shiny)
runApp(shiny-app)
runApp("shiny-app)
ds
""
""
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
runApp("shiny-app")
library(ggplot2)
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
runApp("shiny-app")
setwd("~/shiny-app")
runApp("shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
means<-c(1,100)
m<-data.frame(means)
m
means<-c(1:100)
m<-data.frame(v=means)
m
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
dnorm
dnorm(mean=0.2)
stat_function
runApp("~/shiny-app")
runApp("~/shiny-app")
?dnorm
?dnorm
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
r<-rnorm(10,mean=3.5)
var(r)
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
r<-rnorm(10,mean=3.5)
dnorm(r,mean=3.5)
plot(dnorm(r,mean=3.5),type="l")
plot(dnorm)
plot(dnorm(,mean=3.5))
plot(dnorm(x=NULL,mean=3.5))
r<-rnorm(10,mean=3.5)
plot(dnorm(r,mean=3.5),type="l")
plot(dnorm(),type="l")
plot(dnorm,type="l")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
runApp("~/shiny-app")
exit
quit()
